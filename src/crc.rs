use crc::{Algorithm, Crc};

pub const CRC5: Crc<u8> = Crc::<u8>::new(&Algorithm {
    width: 5,
    poly: 0x05,
    init: 0x1f,
    refin: false,
    refout: false,
    xorout: 0x00,
    check: 0x00,
    residue: 0x00,
});

pub const CRC16: Crc<u16> = Crc::<u16>::new(&Algorithm {
    width: 16,
    poly: 0x1021,
    init: 0xffff,
    refin: false,
    refout: false,
    xorout: 0x0000,
    check: 0x29b1,
    residue: 0x0000,
});

pub const fn crc5(bytes: &[u8]) -> u8 {
    CRC5.checksum(bytes)
}

pub const fn crc16(bytes: &[u8]) -> u16 {
    CRC16.checksum(bytes)
}

#[cfg(test)]
mod tests {
    use super::*;

    /// Test a valid CRC5 invocation.
    #[test]
    fn crc5_correct() {
        // Chain inactive
        assert_eq!(crc5(&[0x53, 0x05, 0x00, 0x00]), 0x03);
        // Chippy
        assert_eq!(crc5(&[0x40, 0x05, 0x00, 0x00]), 0x1C);
        // Init 1
        assert_eq!(
            crc5(&[0x51, 0x09, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00]),
            0x1C
        );
        // Init 2
        assert_eq!(
            crc5(&[0x51, 0x09, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00]),
            0x11
        );
        // Init 3
        assert_eq!(
            crc5(&[0x51, 0x09, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01]),
            0x02
        );
        // Init 4
        assert_eq!(
            crc5(&[0x51, 0x09, 0x00, 0x3C, 0x80, 0x00, 0x80, 0x74]),
            0x10
        );
        // Init 5
        assert_eq!(
            crc5(&[0x51, 0x09, 0x00, 0x68, 0xC0, 0x70, 0x01, 0x11]),
            0x00
        );
        // Init 6
        assert_eq!(
            crc5(&[0x51, 0x09, 0x00, 0x28, 0x06, 0x00, 0x00, 0x0F]),
            0x18
        );
        // Baudrate 1.625Mbps
        assert_eq!(
            crc5(&[0x51, 0x09, 0x00, 0x18, 0x00, 0x00, 0x61, 0x31]),
            0x1C
        );
    }

    /// Test a CRC5 call that does not match.
    #[test]
    fn crc5_wrong() {
        // Chain inactive. This should not match - the expected result is 0x03.
        assert_ne!(crc5(&[0x53, 0x05, 0x00, 0x00]), 0x04);
    }

    /// Test a valid CRC16 invocation.
    #[test]
    fn crc16_correct() {
        // Job example
        assert_eq!(
            crc16(&[
                0x21, 0x96, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x15, 0x9E, 0x07, 0x17, 0x75, 0x32,
                0x8E, 0x63, 0xA2, 0xB3, 0x6A, 0x70, 0xDE, 0x60, 0x4A, 0x09, 0xE9, 0x30, 0x1D, 0xE1,
                0x25, 0x6D, 0x7E, 0xB8, 0x0E, 0xA1, 0xE6, 0x43, 0x82, 0xDF, 0x61, 0x14, 0x15, 0x03,
                0x96, 0x6C, 0x18, 0x5F, 0x50, 0x2F, 0x55, 0x74, 0xD4, 0xBA, 0xAE, 0x2F, 0x3F, 0xC6,
                0x02, 0xD9, 0xCD, 0x3B, 0x9E, 0x39, 0xAD, 0x97, 0x9C, 0xFD, 0xFF, 0x3A, 0x40, 0x49,
                0x4D, 0xB6, 0xD7, 0x8D, 0xA4, 0x51, 0x34, 0x99, 0x29, 0xD1, 0xAD, 0x36, 0x66, 0x1D,
                0xDF, 0xFF, 0xC1, 0xCC, 0x89, 0x33, 0xEA, 0xF3, 0xE8, 0x3A, 0x91, 0x58, 0xA6, 0xD6,
                0xFA, 0x02, 0x0D, 0xCF, 0x60, 0xF8, 0xC1, 0x0E, 0x99, 0x36, 0xDE, 0x71, 0xDB, 0xD3,
                0xF7, 0xD2, 0x86, 0xAF, 0xAD, 0x62, 0x59, 0x3A, 0x8D, 0xA3, 0x28, 0xAF, 0xEC, 0x09,
                0x6D, 0x86, 0xB9, 0x8E, 0x30, 0xE5, 0x79, 0xAE, 0xA4, 0x35, 0xE1, 0x4B, 0xB5, 0xD7,
                0x09, 0xCC, 0xE1, 0x74, 0x04, 0x3A, 0x7C, 0x2D
            ]),
            0x1B5C
        );
    }

    /// Test a CRC16 call that does not match.
    #[test]
    fn crc16_wrong() {
        // Job example. This should not match - the expected result is 0x6CE7.
        assert_ne!(
            crc16(&[
                0x21, 0x96, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x15, 0x9E, 0x07, 0x17, 0x75, 0x32,
                0x8E, 0x63, 0x1F, 0x3B, 0x02, 0x48, 0x36, 0xCA, 0xF5, 0x13, 0x81, 0x95, 0xA8, 0x1A,
                0xE7, 0x75, 0x2A, 0x92, 0x31, 0x73, 0x9A, 0xE1, 0x20, 0xC4, 0xF7, 0x17, 0xAF, 0xAA,
                0x15, 0x73, 0xA1, 0x55, 0xC4, 0x99, 0x4D, 0x17, 0x44, 0xD5, 0xBC, 0xFA, 0x18, 0x7D,
                0x0D, 0xA8, 0x7A, 0x56, 0x57, 0x9B, 0x0F, 0x4F, 0x7E, 0x14, 0x91, 0x48, 0x2D, 0xFF,
                0x0B, 0x65, 0xF9, 0x54, 0xFC, 0xA6, 0x87, 0x3B, 0x1D, 0x75, 0x06, 0x16, 0x30, 0xB4,
                0x42, 0xD8, 0xCD, 0x6B, 0x70, 0xB2, 0xB0, 0xB5, 0xEA, 0xA0, 0xCB, 0x85, 0x8E, 0x1A,
                0xFA, 0xCE, 0x3A, 0xC0, 0x5F, 0x34, 0xCF, 0x57, 0x0E, 0x88, 0x91, 0xCA, 0x52, 0x1E,
                0xD6, 0xCD, 0xD3, 0x8B, 0xB7, 0xFC, 0x73, 0x62, 0xDC, 0x43, 0x7E, 0x59, 0xC8, 0x26,
                0x71, 0x16, 0x61, 0xBA, 0xB4, 0xD6, 0x58, 0x3A, 0xFC, 0x0E, 0xBF, 0x77, 0xB7, 0x25,
                0x54, 0x05, 0x2A, 0x84, 0x6C, 0x4D, 0x27, 0xD6
            ]),
            0x6CE6
        );
    }
}
